unit TestctsObjectStructure;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, ctsTypesDef, ctsBaseInterfaces, ctsCommons, ctsObserver, 
  ctsBaseClasses, ctsSyncObjects, ctsObjectInterface, ctsMemoryPools, 
  ctsObjectStructure;

type
  // Test methods for class TctsVector
  
  TestTctsVector = class(TTestCase)
  private
    FctsVector: TctsVector;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdd;
    procedure TestClear;
    procedure TestContain;
    procedure TestDelete;
    procedure TestFirst;
    procedure TestGetArray;
    procedure TestIndexOf;
    procedure TestInsert;
    procedure TestIsSorted;
    procedure TestLast;
    procedure TestPack;
    procedure TestRemove;
    procedure TestSetCapacity;
    procedure TestSort;
  end;
  // Test methods for class TctsLinkedList
  
  TestTctsLinkedList = class(TTestCase)
  private
    FctsLinkedList: TctsLinkedList;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdd;
    procedure TestClear;
    procedure TestContain;
    procedure TestDeleteNode;
    procedure TestFirst;
    procedure TestGetHead;
    procedure TestGetTail;
    procedure TestInsertNode;
    procedure TestIsSorted;
    procedure TestLast;
    procedure TestPack;
    procedure TestRemove;
    procedure TestSort;
  end;
  // Test methods for class TctsStackVector
  
  TestTctsStackVector = class(TTestCase)
  private
    FctsStackVector: TctsStackVector;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestPop;
    procedure TestPush;
    procedure TestTop;
  end;
  // Test methods for class TctsStackLinked
  
  TestTctsStackLinked = class(TTestCase)
  private
    FctsStackLinked: TctsStackLinked;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestPop;
    procedure TestPush;
    procedure TestTop;
  end;
  // Test methods for class TctsQueueVector
  
  TestTctsQueueVector = class(TTestCase)
  private
    FctsQueueVector: TctsQueueVector;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestBack;
    procedure TestFront;
    procedure TestPop;
    procedure TestPush;
  end;
  // Test methods for class TctsQueueLinked
  
  TestTctsQueueLinked = class(TTestCase)
  private
    FctsQueueLinked: TctsQueueLinked;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestBack;
    procedure TestFront;
    procedure TestPop;
    procedure TestPush;
  end;

implementation

procedure TestTctsVector.SetUp;
begin
  FctsVector := TctsVector.Create;
end;

procedure TestTctsVector.TearDown;
begin
  FctsVector.Free;
  FctsVector := nil;
end;

procedure TestTctsVector.TestAdd;
var
  AItem: System.TObject;
begin
  // TODO: Setup method call parameters
  FctsVector.Add(AItem);
  // TODO: Validate method results
end;

procedure TestTctsVector.TestClear;
begin
  FctsVector.Clear;
  // TODO: Validate method results
end;

procedure TestTctsVector.TestContain;
var
  ReturnValue: Boolean;
  AItem: System.TObject;
begin
  // TODO: Setup method call parameters
  ReturnValue := FctsVector.Contain(AItem);
  // TODO: Validate method results
end;

procedure TestTctsVector.TestDelete;
var
  AIndex: System.Integer;
begin
  // TODO: Setup method call parameters
  FctsVector.Delete(AIndex);
  // TODO: Validate method results
end;

procedure TestTctsVector.TestFirst;
var
  ReturnValue: IctsIterator;
begin
  ReturnValue := FctsVector.First;
  // TODO: Validate method results
end;

procedure TestTctsVector.TestGetArray;
var
  ReturnValue: PctsDataTypeArray;
begin
  ReturnValue := FctsVector.GetArray;
  // TODO: Validate method results
end;

procedure TestTctsVector.TestIndexOf;
var
  ReturnValue: System.Integer;
  AItem: System.TObject;
begin
  // TODO: Setup method call parameters
  ReturnValue := FctsVector.IndexOf(AItem);
  // TODO: Validate method results
end;

procedure TestTctsVector.TestInsert;
var
  AItem: System.TObject;
  AIndex: System.Integer;
begin
  // TODO: Setup method call parameters
  FctsVector.Insert(AIndex, AItem);
  // TODO: Validate method results
end;

procedure TestTctsVector.TestIsSorted;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FctsVector.IsSorted;
  // TODO: Validate method results
end;

procedure TestTctsVector.TestLast;
var
  ReturnValue: IctsIterator;
begin
  ReturnValue := FctsVector.Last;
  // TODO: Validate method results
end;

procedure TestTctsVector.TestPack;
begin
  FctsVector.Pack;
  // TODO: Validate method results
end;

procedure TestTctsVector.TestRemove;
var
  ReturnValue: Boolean;
  AItem: System.TObject;
begin
  // TODO: Setup method call parameters
  ReturnValue := FctsVector.Remove(AItem);
  // TODO: Validate method results
end;

procedure TestTctsVector.TestSetCapacity;
var
  AValue: System.Integer;
begin
  // TODO: Setup method call parameters
  FctsVector.SetCapacity(AValue);
  // TODO: Validate method results
end;

procedure TestTctsVector.TestSort;
begin
  FctsVector.Sort;
  // TODO: Validate method results
end;

procedure TestTctsLinkedList.SetUp;
begin
  FctsLinkedList := TctsLinkedList.Create;
end;

procedure TestTctsLinkedList.TearDown;
begin
  FctsLinkedList.Free;
  FctsLinkedList := nil;
end;

procedure TestTctsLinkedList.TestAdd;
var
  AItem: System.TObject;
begin
  // TODO: Setup method call parameters
  FctsLinkedList.Add(AItem);
  // TODO: Validate method results
end;

procedure TestTctsLinkedList.TestClear;
begin
  FctsLinkedList.Clear;
  // TODO: Validate method results
end;

procedure TestTctsLinkedList.TestContain;
var
  ReturnValue: Boolean;
  AItem: System.TObject;
begin
  // TODO: Setup method call parameters
  ReturnValue := FctsLinkedList.Contain(AItem);
  // TODO: Validate method results
end;

procedure TestTctsLinkedList.TestDeleteNode;
var
  aNode: PNode;
begin
  // TODO: Setup method call parameters
  FctsLinkedList.DeleteNode(aNode);
  // TODO: Validate method results
end;

procedure TestTctsLinkedList.TestFirst;
var
  ReturnValue: IctsIterator;
begin
  ReturnValue := FctsLinkedList.First;
  // TODO: Validate method results
end;

procedure TestTctsLinkedList.TestGetHead;
var
  ReturnValue: PNode;
begin
  ReturnValue := FctsLinkedList.GetHead;
  // TODO: Validate method results
end;

procedure TestTctsLinkedList.TestGetTail;
var
  ReturnValue: PNode;
begin
  ReturnValue := FctsLinkedList.GetTail;
  // TODO: Validate method results
end;

procedure TestTctsLinkedList.TestInsertNode;
var
  AItem: System.TObject;
  aNode: PNode;
begin
  // TODO: Setup method call parameters
  FctsLinkedList.InsertNode(aNode, AItem);
  // TODO: Validate method results
end;

procedure TestTctsLinkedList.TestIsSorted;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FctsLinkedList.IsSorted;
  // TODO: Validate method results
end;

procedure TestTctsLinkedList.TestLast;
var
  ReturnValue: IctsIterator;
begin
  ReturnValue := FctsLinkedList.Last;
  // TODO: Validate method results
end;

procedure TestTctsLinkedList.TestPack;
begin
  FctsLinkedList.Pack;
  // TODO: Validate method results
end;

procedure TestTctsLinkedList.TestRemove;
var
  ReturnValue: Boolean;
  AItem: System.TObject;
begin
  // TODO: Setup method call parameters
  ReturnValue := FctsLinkedList.Remove(AItem);
  // TODO: Validate method results
end;

procedure TestTctsLinkedList.TestSort;
begin
  FctsLinkedList.Sort;
  // TODO: Validate method results
end;

procedure TestTctsStackVector.SetUp;
begin
  FctsStackVector := TctsStackVector.Create;
end;

procedure TestTctsStackVector.TearDown;
begin
  FctsStackVector.Free;
  FctsStackVector := nil;
end;

procedure TestTctsStackVector.TestPop;
begin
  FctsStackVector.Pop;
  // TODO: Validate method results
end;

procedure TestTctsStackVector.TestPush;
var
  aItem: System.TObject;
begin
  // TODO: Setup method call parameters
  FctsStackVector.Push(aItem);
  // TODO: Validate method results
end;

procedure TestTctsStackVector.TestTop;
var
  ReturnValue: System.TObject;
begin
  ReturnValue := FctsStackVector.Top;
  // TODO: Validate method results
end;

procedure TestTctsStackLinked.SetUp;
begin
  FctsStackLinked := TctsStackLinked.Create;
end;

procedure TestTctsStackLinked.TearDown;
begin
  FctsStackLinked.Free;
  FctsStackLinked := nil;
end;

procedure TestTctsStackLinked.TestPop;
begin
  FctsStackLinked.Pop;
  // TODO: Validate method results
end;

procedure TestTctsStackLinked.TestPush;
var
  aItem: System.TObject;
begin
  // TODO: Setup method call parameters
  FctsStackLinked.Push(aItem);
  // TODO: Validate method results
end;

procedure TestTctsStackLinked.TestTop;
var
  ReturnValue: System.TObject;
begin
  ReturnValue := FctsStackLinked.Top;
  // TODO: Validate method results
end;

procedure TestTctsQueueVector.SetUp;
begin
  FctsQueueVector := TctsQueueVector.Create;
end;

procedure TestTctsQueueVector.TearDown;
begin
  FctsQueueVector.Free;
  FctsQueueVector := nil;
end;

procedure TestTctsQueueVector.TestBack;
var
  ReturnValue: System.TObject;
begin
  ReturnValue := FctsQueueVector.Back;
  // TODO: Validate method results
end;

procedure TestTctsQueueVector.TestFront;
var
  ReturnValue: System.TObject;
begin
  ReturnValue := FctsQueueVector.Front;
  // TODO: Validate method results
end;

procedure TestTctsQueueVector.TestPop;
begin
  FctsQueueVector.Pop;
  // TODO: Validate method results
end;

procedure TestTctsQueueVector.TestPush;
var
  aItem: System.TObject;
begin
  // TODO: Setup method call parameters
  FctsQueueVector.Push(aItem);
  // TODO: Validate method results
end;

procedure TestTctsQueueLinked.SetUp;
begin
  FctsQueueLinked := TctsQueueLinked.Create;
end;

procedure TestTctsQueueLinked.TearDown;
begin
  FctsQueueLinked.Free;
  FctsQueueLinked := nil;
end;

procedure TestTctsQueueLinked.TestBack;
var
  ReturnValue: System.TObject;
begin
  ReturnValue := FctsQueueLinked.Back;
  // TODO: Validate method results
end;

procedure TestTctsQueueLinked.TestFront;
var
  ReturnValue: System.TObject;
begin
  ReturnValue := FctsQueueLinked.Front;
  // TODO: Validate method results
end;

procedure TestTctsQueueLinked.TestPop;
begin
  FctsQueueLinked.Pop;
  // TODO: Validate method results
end;

procedure TestTctsQueueLinked.TestPush;
var
  aItem: System.TObject;
begin
  // TODO: Setup method call parameters
  FctsQueueLinked.Push(aItem);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTctsVector.Suite);
  RegisterTest(TestTctsLinkedList.Suite);
  RegisterTest(TestTctsStackVector.Suite);
  RegisterTest(TestTctsStackLinked.Suite);
  RegisterTest(TestTctsQueueVector.Suite);
  RegisterTest(TestTctsQueueLinked.Suite);
end.

